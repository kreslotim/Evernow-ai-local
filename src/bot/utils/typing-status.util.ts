import { Injectable, Logger } from '@nestjs/common';
import { Context } from 'telegraf';

/**
 * –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è typing —Å—Ç–∞—Ç—É—Å–æ–º –≤ Telegram –±–æ—Ç–µ
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –±–æ—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç" –≤–æ –≤—Ä–µ–º—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */
@Injectable()
export class TypingStatusUtil {
  private readonly logger = new Logger(TypingStatusUtil.name);

  // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö typing —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  private typingStatuses = new Map<
    string,
    { interval: NodeJS.Timeout; chatId: number; startTime: number; count: number }
  >();

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç typing —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 4 —Å–µ–∫—É–Ω–¥—ã –¥–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
   * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ typing —Å—Ç–∞—Ç—É—Å–∞
   */
  startTypingStatus(ctx: Context, userId: string): () => void {
    if (!userId) {
      this.logger.warn('startTypingStatus called with empty userId');
      return () => {};
    }

    // –ï—Å–ª–∏ typing —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π
    if (this.typingStatuses.has(userId)) {
      this.logger.debug(`Stopping existing typing status for user ${userId}`);
      this.stopTypingStatus(userId);
    }

    const chatId = ctx.chat?.id;
    if (!chatId) {
      this.logger.warn(`No chatId found for user ${userId}`);
      return () => {}; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é –µ—Å–ª–∏ –Ω–µ—Ç chatId
    }

    const startTime = Date.now();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ —Å–Ω–∞—á–∞–ª–∞
    const typingData = {
      interval: null as any, // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∏–∂–µ
      chatId,
      startTime,
      count: 0,
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ typing —Å—Ç–∞—Ç—É—Å–∞
    const sendTyping = async () => {
      try {
        typingData.count++;
        await ctx.telegram.sendChatAction(chatId, 'typing');
        this.logger.log(`‚úÖ Typing status sent #${typingData.count} for user ${userId} (${Date.now() - startTime}ms)`);
      } catch (error) {
        this.logger.warn(`‚ùå Failed to send typing status #${typingData.count} for user ${userId}: ${error.message}`);
        // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –±—ã—Ç—å –æ—Ñ–ª–∞–π–Ω
      }
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π typing —Å—Ç–∞—Ç—É—Å
    this.logger.log(`üü¢ Starting typing status for user ${userId} in chat ${chatId}`);
    sendTyping();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è typing —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ 4 —Å–µ–∫—É–Ω–¥—ã
    const typingInterval = setInterval(() => {
      this.logger.debug(`üîÑ Interval triggered for user ${userId}, sending typing...`);
      sendTyping();
    }, 4000);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö
    typingData.interval = typingInterval;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    this.typingStatuses.set(userId, typingData);

    this.logger.debug(`Typing status started for user ${userId}, interval ID: ${typingInterval}`);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    return () => {
      this.stopTypingStatus(userId);
    };
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç typing —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  stopTypingStatus(userId: string): void {
    if (!userId) {
      this.logger.warn('stopTypingStatus called with empty userId');
      return;
    }

    const typingData = this.typingStatuses.get(userId);
    if (typingData) {
      const duration = Date.now() - typingData.startTime;
      clearInterval(typingData.interval);
      this.typingStatuses.delete(userId);
      this.logger.log(
        `üî¥ Typing status stopped for user ${userId} after ${duration}ms, sent ${typingData.count} updates, interval cleared`,
      );
    } else {
      this.logger.warn(
        `‚ö†Ô∏è Attempted to stop typing status for user ${userId} but no active status found. Active statuses: ${Array.from(this.typingStatuses.keys()).join(', ')}`,
      );
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ typing —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns true, –µ—Å–ª–∏ typing —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–µ–Ω
   */
  isTypingActive(userId: string): boolean {
    return this.typingStatuses.has(userId);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö typing —Å—Ç–∞—Ç—É—Å–∞—Ö (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
   * @returns –ú–∞—Å—Å–∏–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö
   */
  getActiveStatuses(): Array<{ userId: string; chatId: number; duration: number; count: number }> {
    const now = Date.now();
    return Array.from(this.typingStatuses.entries()).map(([userId, data]) => ({
      userId,
      chatId: data.chatId,
      duration: now - data.startTime,
      count: data.count,
    }));
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ typing —Å—Ç–∞—Ç—É—Å—ã (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
   */
  clearAllTypingStatuses(): void {
    const statusCount = this.typingStatuses.size;
    for (const [userId, data] of this.typingStatuses.entries()) {
      const duration = Date.now() - data.startTime;
      clearInterval(data.interval);
      this.logger.debug(`Typing status cleared for user ${userId} (was active for ${duration}ms)`);
    }
    this.typingStatuses.clear();
    this.logger.log(`All ${statusCount} typing statuses cleared`);
  }
}
