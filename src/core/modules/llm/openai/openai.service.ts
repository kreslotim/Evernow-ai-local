import { Injectable, Logger } from '@nestjs/common';
import OpenAI from 'openai';
import { AnalyzeType } from '@prisma/client';
import * as fs from 'fs';
import * as path from 'path';
import { ConfigService } from '../../config/config.service';
import { PromptService } from '../prompt/prompt.service';
import { PromptKey } from '../prompt/prompts.constants';

export interface AnalyzePhotoRequest {
  photoPaths: string[];
  analysisType: AnalyzeType;
  userId: string;
}

export interface AnalyzePhotoResponse {
  analysisResultText: string;
  summaryText: string;
  success: boolean;
  error?: string;
}

export interface AnalyzePhotoWithSurveyContextRequest {
  photoUrls: string[];
  surveyAnswers: object;
  feelings: string;
  userId: string;
}

export interface FullAnalysisResponse {
  fullAnswer: string;
  blockHyposis: string;
  shortSummary: string;
  success: boolean;
  error?: string;
}

@Injectable()
export class OpenAIService {
  private readonly logger = new Logger(OpenAIService.name);
  private readonly client: OpenAI;
  private readonly model: string;
  private readonly summaryModel: string;
  private readonly useOpenRouter: boolean;

  constructor(
    private readonly configService: ConfigService,
    private readonly promptService: PromptService,
  ) {
    // this.useOpenRouter = this.configService.useOpenRouter();

    // if (this.useOpenRouter) {
    //   // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è OpenRouter
    //   const openRouterApiKey = this.configService.getOpenRouterApiKey();
    //   if (!openRouterApiKey) {
    //     throw new Error('OpenRouter API key not configured');
    //   }

    //   this.client = new OpenAI({
    //     apiKey: openRouterApiKey,
    //     baseURL: 'https://openrouter.ai/api/v1',
    //   });

    //   this.logger.log('Using OpenRouter for OpenAI API calls');
    // } else {
    // –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI
    const apiKey = this.configService.getOpenAiApiKey();
    if (!apiKey) {
      throw new Error('OpenAI API key not configured');
    }

    this.client = new OpenAI({
      apiKey: apiKey,
    });

    this.logger.log('Using direct OpenAI API calls');
    // }

    // if (this.useOpenRouter) {
    //   // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –º–æ–¥–µ–ª–∏
    //   this.model = 'openai/o3';
    //   this.summaryModel = 'openai/gpt-4.1-nano';
    // } else {
    // –î–ª—è –ø—Ä—è–º–æ–≥–æ OpenAI –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ API
    this.model = 'o3';
    this.summaryModel = 'gpt-4.1-nano';
    // }
  }

  private async getPromptForAnalysisType(analysisType: AnalyzeType): Promise<string> {
    try {
      // –î–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –ø—Ä–æ–º–ø—Ç
      const promptKey = PromptKey.OPENAI_MAIN_ANALYSIS;
      const prompt = await this.promptService.getPrompt(promptKey);

      if (!prompt) {
        throw new Error(`No prompt found for analysis type: ${analysisType}`);
      }

      return prompt;
    } catch (error) {
      this.logger.error(`Failed to load prompt for analysis type: ${analysisType}`, error);
      throw new Error(`Failed to load prompt for analysis type: ${analysisType}`);
    }
  }

  private async getSummaryPrompt(): Promise<string> {
    try {
      const prompt = await this.promptService.getPrompt(PromptKey.OPENAI_SUMMARY);

      if (!prompt) {
        throw new Error('Summary prompt not found');
      }

      return prompt;
    } catch (error) {
      this.logger.error('Failed to load summary prompt', error);
      throw new Error('Failed to load summary prompt');
    }
  }

  private encodeImageToBase64(imagePath: string): string {
    try {
      const imageBuffer = fs.readFileSync(imagePath);
      return imageBuffer.toString('base64');
    } catch (error) {
      this.logger.error(`Failed to encode image to base64: ${imagePath}`, error);
      throw new Error('Failed to process image file');
    }
  }

  private getImageMimeType(imagePath: string): string {
    const ext = path.extname(imagePath).toLowerCase();
    switch (ext) {
      case '.jpg':
      case '.jpeg':
        return 'image/jpeg';
      case '.png':
        return 'image/png';
      case '.webp':
        return 'image/webp';
      default:
        return 'image/jpeg'; // Default fallback
    }
  }

  private isRefusalResponse(text: string): boolean {
    const refusalPatterns = [
      /I'm sorry, but I can't help with that./i,
      /–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –ø–æ–º–æ—á—å —Å —ç—Ç–∏–º./i,
      /I cannot provide[.!?]?/i,
      /I can't analyze[.!?]?/i,
      /I'm not able to[.!?]?/i,
      /–Ø –Ω–µ –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å[.!?]?/i,
      /–Ø –Ω–µ –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å[.!?]?/i,
      /–Ø –Ω–µ –º–æ–≥—É –ø–æ–º–æ—á—å[.!?]?/i,
      /sorry,? (?:but )?I can't[.!?]?/i,
      /I (?:cannot|can't) (?:help|assist|analyze)[.!?]?/i,
      /unable to (?:help|assist|analyze|provide)[.!?]?/i,
      /–Ω–µ –º–æ–≥—É (?:–ø–æ–º–æ—á—å|–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å|–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å)[.!?]?/i,
    ];

    return refusalPatterns.some((pattern) => pattern.test(text));
  }

  async analyzePhoto(request: AnalyzePhotoRequest, retryCount: number = 0): Promise<AnalyzePhotoResponse> {
    try {
      this.logger.log(
        `Starting photo analysis for user ${request.userId}, type: ${request.analysisType} with ${request.photoPaths.length} photos (retry: ${retryCount})`,
      );

      const systemPrompt = await this.getPromptForAnalysisType(request.analysisType);

      // Validate all photos exist
      for (const photoPath of request.photoPaths) {
        if (!fs.existsSync(photoPath)) {
          throw new Error(`Photo file not found: ${photoPath}`);
        }
      }

      let analysisResult: string;

      // if (this.useOpenRouter) {
      //   // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π chat.completions.create –¥–ª—è OpenRouter
      //   this.logger.log(`üîÑ Using OpenRouter with model: ${this.model}`);
      //   analysisResult = await this.analyzePhotoWithChatCompletions(request, systemPrompt);
      // } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π responses.create –¥–ª—è –ø—Ä—è–º–æ–≥–æ OpenAI o3
      this.logger.log(`üîÑ Using direct OpenAI with model: ${this.model}`);
      analysisResult = await this.analyzePhotoWithResponses(request, systemPrompt);
      // }

      if (!analysisResult) {
        throw new Error('No analysis result received from AI model');
      }

      // Check if the response is a refusal
      if (this.isRefusalResponse(analysisResult) || analysisResult.length < 1000) {
        this.logger.warn(`AI model refused to analyze photo for user ${request.userId}, attempt ${retryCount + 1}`);

        if (retryCount < 1) {
          // Retry once
          this.logger.log(`Retrying analysis for user ${request.userId}`);
          return await this.analyzePhoto(request, retryCount + 1);
        } else {
          // Failed after retry
          this.logger.error(`AI model refused analysis after retry for user ${request.userId}`);
          return {
            analysisResultText: '',
            summaryText: '',
            success: false,
            error: 'AI_REFUSAL',
          };
        }
      }

      const summaryText = analysisResult.length > 200 ? analysisResult.substring(0, 200) + '...' : analysisResult;

      this.logger.log(`Photo analysis completed for user ${request.userId} with ${request.photoPaths.length} photos`);

      return {
        analysisResultText: analysisResult,
        summaryText: summaryText,
        success: true,
      };
    } catch (error) {
      this.logger.error(`Photo analysis failed for user ${request.userId}:`, error);

      return {
        analysisResultText: '',
        summaryText: '',
        success: false,
        error: error.message || 'Analysis failed',
      };
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π chat.completions API (–¥–ª—è OpenRouter)
   */
  private async analyzePhotoWithChatCompletions(request: AnalyzePhotoRequest, systemPrompt: string): Promise<string> {
    // Prepare image content for OpenRouter
    const imageContents = [];
    for (const photoPath of request.photoPaths) {
      const base64Image = this.encodeImageToBase64(photoPath);
      const mimeType = this.getImageMimeType(photoPath);

      imageContents.push({
        type: 'image_url',
        image_url: {
          url: `data:${mimeType};base64,${base64Image}`,
        },
      });
    }

    // Build the user message content
    const userMessageContent = [
      {
        type: 'text',
        text:
          request.photoPaths.length > 1
            ? `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ ${request.photoPaths.length} —Ñ–æ—Ç–æ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.`
            : '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.',
      },
      ...imageContents,
    ];

    const response = await this.client.chat.completions.create({
      model: this.model,
      messages: [
        {
          role: 'system',
          content: systemPrompt,
        },
        {
          role: 'user',
          content: '–Ø –±—ã —Ö–æ—Ç–µ–ª –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—ë —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ',
        },
        {
          role: 'assistant',
          content: '–î–∞, –∫–æ–Ω–µ—á–Ω–æ, —Å–µ–π—á–∞—Å —è —Å–¥–µ–ª–∞—é –≤–∞—à –∞–Ω–∞–ª–∏–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ.',
        },
        {
          role: 'user',
          content: userMessageContent,
        },
      ],
      max_tokens: 4000,
      temperature: 0.1,
    });

    return response.choices[0]?.message?.content || '';
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π responses API (–¥–ª—è –ø—Ä—è–º–æ–≥–æ OpenAI o3)
   */
  private async analyzePhotoWithResponses(request: AnalyzePhotoRequest, systemPrompt: string): Promise<string> {
    // Prepare image content for OpenAI o3
    const imageContents = [];
    for (const photoPath of request.photoPaths) {
      const base64Image = this.encodeImageToBase64(photoPath);
      const mimeType = this.getImageMimeType(photoPath);

      imageContents.push({
        type: 'input_image',
        image_url: `data:${mimeType};base64,${base64Image}`,
      });
    }

    // Build the user message content
    const userMessageContent = [
      {
        type: 'input_text',
        text:
          request.photoPaths.length > 1
            ? `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ ${request.photoPaths.length} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.`
            : '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.',
      },
      ...imageContents,
    ];

    const response = await this.client.responses.create({
      model: this.model,
      input: [
        {
          role: 'developer',
          content: [
            {
              type: 'input_text',
              text: systemPrompt,
            },
          ],
        },
        {
          role: 'user',
          content: [
            {
              type: 'input_text',
              text: '–Ø –±—ã —Ö–æ—Ç–µ–ª –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ',
            },
          ],
        },
        {
          role: 'assistant',
          content: [
            // @ts-ignore
            {
              type: 'output_text',
              text: '–î–∞, –∫–æ–Ω–µ—á–Ω–æ, —Å–µ–π—á–∞—Å —è —Å–¥–µ–ª–∞—é –≤–∞—à –∞–Ω–∞–ª–∏–∑ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ.',
            },
          ],
        },
        {
          role: 'user',
          content: userMessageContent,
        },
      ],
      text: {
        format: {
          type: 'text',
        },
      },
      reasoning: {
        effort: 'medium',
        summary: null,
      },
      tools: [],
      store: true,
    });

    return response.output_text || '';
  }

  async validateVoiceMessage(message: string): Promise<{ rating: number }> {
    try {
      const response = await this.client.chat.completions.create({
        model: this.summaryModel,
        messages: []
      })
    } catch (e) {
      return {
        rating: -2
      }
    }
  }

  async generateSummary(
    fullAnalysisText: string,
    userId: string,
  ): Promise<{ summary: string; success: boolean; error?: string }> {
    try {
      this.logger.log(`üîÑ Generating summary for user ${userId}`);

      const summaryPrompt = await this.getSummaryPrompt();

      const response = await this.client.chat.completions.create({
        model: this.summaryModel,
        messages: [
          {
            role: 'system',
            content: summaryPrompt,
          },
          {
            role: 'user',
            content: fullAnalysisText,
          },
        ],
        max_tokens: 150,
        temperature: 0.1,
      });

      const summaryResult = response.choices[0]?.message?.content;
      if (!summaryResult) {
        throw new Error('No summary result received from OpenAI');
      }

      this.logger.log(`‚úÖ Summary generated for user ${userId}`);

      return {
        summary: summaryResult.trim(),
        success: true,
      };
    } catch (error) {
      this.logger.error(`‚ùå Summary generation failed for user ${userId}:`, error);

      return {
        summary: '',
        success: false,
        error: error.message || 'Summary generation failed',
      };
    }
  }

  async validatePhotos(urls: string[]): Promise<{ rating: number }> {

    this.logger.log(`Recieved ${urls.length} for photos validation: ${urls}`);
    try {
      if (urls.length !== 3) throw new Error("–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–≤–Ω–æ 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");

      const prompt = await this.promptService.getPrompt(PromptKey.OPENAI_ANALYZE_PHOTOS);

      const response = await this.client.chat.completions.create({
        model: "gpt-4o",
        temperature: 0.2,
        messages: [
          {
            role: "system",
            content: prompt.trim()
          },
          {
            role: "user",
            content: [
              { type: "text", text: "–û—Ü–µ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç—Ç–∏—Ö —Ç—Ä—ë—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º." },
              ...urls.map((url) => ({
                type: "image_url" as const,
                image_url: {
                  url,
                  detail: "low" as const
                }
              }))
            ]
          }
        ]
      });
      const jsonString = response.choices[0].message.content;
      const jsonMatch = jsonString.match(/{[\s\S]*?}/);
      const parsed = jsonMatch ? JSON.parse(jsonMatch[0].replaceAll('`', '').replaceAll('json', '').replaceAll('+', '')) : { rating: 0 };

      return parsed;
    } catch (e) {
      this.logger.error(`Cannot validate some photos: ${e}`);
      return { rating: -2 }
    }
  }

  async validateFacePhoto(url: string): Promise<{ rating: number }> {
    this.logger.log(`Recieved validation face photo url: ${url}`);
    try {
      const prompt = await this.promptService.getPrompt(PromptKey.OPENAI_ANALYZE_FACE)

      const response = await this.client.chat.completions.create({
        model: "gpt-4o",
        temperature: 0.2,
        messages: [
          {
            role: "system",
            content: prompt.trim()
          },
          {
            role: "user",
            content: [
              { type: "text", text: "–ü—Ä–æ–≤–µ—Ä—å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:" },
              {
                type: "image_url",
                image_url: {
                  url,
                  detail: "low"
                }
              }
            ]
          }
        ]
      });

      const jsonText = response.choices[0].message.content?.match(/{[\s\S]*?}/)?.[0];
      console.log(response.choices[0].message);
      if (!jsonText) throw new Error("–ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ JSON");

      const parsed = JSON.parse(jsonText.replaceAll('`', '').replaceAll('+', ''));
      if (typeof parsed.rating !== "number") throw new Error("Incorrect rating");

      console.log(parsed);

      return parsed;
    } catch (e) {
      this.logger.error(`Recieved an error after trying to validate a face photo: ${e}`);
      return {
        rating: -2
      }
    }
  }


  /**
   * –°–æ–∑–¥–∞—ë—Ç –±–ª–æ–∫-–≥–∏–ø–æ—Ç–µ–∑—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å gpt-4.1-mini
   * @param data - –î–∞–Ω–Ω—ã–µ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (—É–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–∑ analyzePhotoWithResponses)
   * @returns –ë–ª–æ–∫-–≥–∏–ø–æ—Ç–µ–∑–∞
   */
  async createBlockHypothesis(data: {
    analysisDescription: string;
    feelings: string;
    feelingsAnalysis: string;
    surveyAnswers?: object; // –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—Ä–æ—Å (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ)
  }): Promise<string> {
    try {
      this.logger.log('üîÑ Creating block hypothesis via gpt-4.1-mini from photo analysis');

      const prompt = await this.promptService.getPrompt(PromptKey.OPENAI_BLOCK_HYPOTHESIS);

      // const prompt = this.promptService.replaceVariables(promptTemplate, {
      //   analysisDescription: data.analysisDescription,
      //   feelings: '', // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ –Ω–æ–≤–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
      //   feelingsAnalysis: '', // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ –Ω–æ–≤–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
      //   surveyAnswers: '', // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ –Ω–æ–≤–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
      // });

      const response = await this.client.chat.completions.create({
        model: 'gpt-4.1-mini', // –ò—Å–ø–æ–ª—å–∑—É–µ–º gpt-4.1-mini –∫–∞–∫ —É–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        messages: [
          {
            role: 'system',
            content: prompt,
          },
          {
            role: 'user',
            content: `–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫—É—é –±–ª–æ–∫-–≥–∏–ø–æ—Ç–µ–∑—É:\n\n${data.analysisDescription}`,
          },
        ],
        max_tokens: 2000,
        temperature: 0.7,
      });

      const hypothesis =
        response.choices[0]?.message?.content ||
        '–í–µ—Ä–æ—è—Ç–Ω–æ, –æ—Å–Ω–æ–≤–Ω–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å–≤—è–∑–∞–Ω —Å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ–º –º–µ–∂–¥—É –≤–Ω–µ—à–Ω–∏–º–∏ –æ–∂–∏–¥–∞–Ω–∏—è–º–∏ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏—è–º–∏. –≠—Ç–æ —Å–æ–∑–¥–∞—ë—Ç –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏—Å—Ç–∏–Ω–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞.';

      this.logger.log(`‚úÖ Block hypothesis created via gpt-4.1-mini: ${hypothesis.substring(0, 100)}...`);
      return hypothesis;
    } catch (error) {
      this.logger.error(`‚ùå Error creating block hypothesis: ${error.message}`, error.stack);
      return '–ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ –º–µ–∂–¥—É —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ–º –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º –∏ —Å—Ç—Ä–∞—Ö–æ–º –≤—ã–π—Ç–∏ –∑–∞ —Ä–∞–º–∫–∏ –ø—Ä–∏–≤—ã—á–Ω–æ–≥–æ. –ö–ª—é—á –∫ —Ä–æ—Å—Ç—É ‚Äî –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Å–≤–æ–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å–º–µ–ª–æ—Å—Ç–∏ –±—ã—Ç—å —Å–æ–±–æ–π.';
    }
  }

  /**
   * –°–æ–∑–¥–∞—ë—Ç –≥–∏–ø–æ—Ç–µ–∑—É –≤—Ç–æ—Ä–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å o3
   * @param data - –î–∞–Ω–Ω—ã–µ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞, –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≥–∏–ø–æ—Ç–µ–∑—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
   * @returns –ì–∏–ø–æ—Ç–µ–∑–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
   */
  async createSecondOrderHypothesis(data: {
    analysisDescription: string;
    feelings: string;
    previousHypothesis: string;
    surveyAnswers?: object; // –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—Ä–æ—Å
  }): Promise<string> {
    try {
      this.logger.log('üîÑ Creating second order hypothesis via OpenAI o3');

      const promptTemplate = await this.promptService.getPrompt(PromptKey.OPENAI_SECOND_ORDER_HYPOTHESIS);

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
      const surveyData = data.surveyAnswers ? JSON.stringify(data.surveyAnswers, null, 2) : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–∞';

      const prompt = this.promptService.replaceVariables(promptTemplate, {
        analysisDescription: data.analysisDescription,
        feelings: data.feelings,
        previousHypothesis: data.previousHypothesis,
        surveyAnswers: surveyData,
      });

      const response = await this.client.responses.create({
        model: this.model, // o3
        input: [
          {
            role: 'developer',
            content: [
              {
                type: 'input_text',
                text: prompt,
              },
            ],
          },
        ],
        text: {
          format: {
            type: 'text',
          },
        },
        reasoning: {
          effort: 'medium',
          summary: null,
        },
        tools: [],
        store: true,
      });

      const hypothesis =
        response.output_text ||
        '–í–æ–∑–º–æ–∂–Ω–æ, –ø–µ—Ä–≤–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞ –∑–∞—Ç—Ä–æ–Ω—É–ª–∞ –ª–∏—à—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–π —Å–ª–æ–π. –ü–æ—Ö–æ–∂–µ, –∏—Å—Ç–∏–Ω–Ω—ã–π –±–ª–æ–∫ –ª–µ–∂–∏—Ç –Ω–µ –≤ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–∏, –∞ –≤ —Å—Ç—Ä–∞—Ö–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Ç–µ–∫—É—â—É—é –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –≤—ã—Å–æ—Ç. –≠—Ç–æ —Ç–æ—á–∫–∞, –≥–¥–µ —Ä–æ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç –Ω–µ –±–æ—Ä—å–±—ã, –∞ –ø—Ä–∏–Ω—è—Ç–∏—è.';

      this.logger.log(`‚úÖ Second order hypothesis created: ${hypothesis.substring(0, 100)}...`);
      return hypothesis;
    } catch (error) {
      this.logger.error(`‚ùå Error creating 2nd order hypothesis: ${error.message}`, error.stack);
      return '–ò–Ω–æ–≥–¥–∞ –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Ü–µ–ª—å. –í–æ–∑–º–æ–∂–Ω–æ, –¥–µ–ª–æ –Ω–µ –≤ —Å—Ç—Ä–∞—Ö–µ, –∞ –≤ –ø–æ–∏—Å–∫–µ –∏—Å—Ç–∏–Ω–Ω–æ–≥–æ –ø—É—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–µ—Å–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—Ö, –Ω–æ –∏ –≥–∞—Ä–º–æ–Ω–∏—é. –í–∞–∂–Ω–æ –ø—Ä–∏—Å–ª—É—à–∏–≤–∞—Ç—å—Å—è –∫ —Å–µ–±–µ.';
    }
  }



  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–æ—Å–∞
   * @param request - –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –æ–ø—Ä–æ—Å–∞
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
   */
  async analyzePhotoWithSurveyContext(request: AnalyzePhotoWithSurveyContextRequest): Promise<AnalyzePhotoResponse> {
    try {
      this.logger.log(
        `üîÑ Starting photo analysis with survey context for user ${request.userId} with ${request.photoUrls.length} photos`,
      );

      const systemPrompt = await this.getPromptForAnalysisType('DEFAULT' as AnalyzeType);

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –æ–ø—Ä–æ—Å–∞
      const surveyContext = JSON.stringify(request.surveyAnswers, null, 2);
      const feelingsContext = request.feelings || '';

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —á–µ—Ä–µ–∑ TelegramService
      const { TelegramService } = await import('../../telegram/telegram.service');
      const telegramService = new TelegramService(this.configService);

      const downloadedPhotoPaths: string[] = [];
      for (const photoUrl of request.photoUrls) {
        try {
          const fileName = `${Date.now()}_${Math.random().toString(36).substring(7)}.jpg`;
          const uploadDir = path.join(process.cwd(), 'uploads', 'photos');
          const filePath = path.join(uploadDir, fileName);

          // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
          const downloadedPath = await telegramService.downloadFile(photoUrl, filePath);
          downloadedPhotoPaths.push(downloadedPath);
        } catch (downloadError) {
          this.logger.error(`Failed to download photo ${photoUrl}: ${downloadError.message}`);
          throw new Error(`Failed to download photo: ${downloadError.message}`);
        }
      }

      // Validate all photos exist
      for (const photoPath of downloadedPhotoPaths) {
        if (!fs.existsSync(photoPath)) {
          throw new Error(`Photo file not found: ${photoPath}`);
        }
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —á–µ—Ä–µ–∑ responses API
      const analysisResult = await this.analyzePhotoWithSurveyContextInternal(
        downloadedPhotoPaths,
        systemPrompt,
        surveyContext,
        feelingsContext,
      );

      if (!analysisResult) {
        throw new Error('No analysis result received from AI model');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–∫–∞–∑ AI
      if (this.isRefusalResponse(analysisResult) || analysisResult.length < 1000) {
        this.logger.warn(`AI model refused to analyze photo with survey context for user ${request.userId}`);
        return {
          analysisResultText: '',
          summaryText: '',
          success: false,
          error: 'AI_REFUSAL',
        };
      }

      const summaryText = analysisResult.length > 200 ? analysisResult.substring(0, 200) + '...' : analysisResult;

      this.logger.log(`‚úÖ Photo analysis with survey context completed for user ${request.userId}`);

      return {
        analysisResultText: analysisResult,
        summaryText: summaryText,
        success: true,
      };
    } catch (error) {
      this.logger.error(`‚ùå Photo analysis with survey context failed for user ${request.userId}:`, error);

      return {
        analysisResultText: '',
        summaryText: '',
        success: false,
        error: error.message || 'Analysis failed',
      };
    }
  }

  /**
   * –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –æ–ø—Ä–æ—Å–∞
   */
  private async analyzePhotoWithSurveyContextInternal(
    photoPaths: string[],
    systemPrompt: string,
    surveyContext: string,
    feelingsContext: string,
  ): Promise<string> {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const imageContents = [];
    for (const photoPath of photoPaths) {
      const base64Image = this.encodeImageToBase64(photoPath);
      const mimeType = this.getImageMimeType(photoPath);

      imageContents.push({
        type: 'input_image',
        image_url: `data:${mimeType};base64,${base64Image}`,
      });
    }

    // –†–∞—Å—à–∏—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ –æ–ø—Ä–æ—Å–∞
    const extendedPrompt = `${systemPrompt}

–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢ –ò–ó –ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–û–ì–û –û–ü–†–û–°–ê:

${feelingsContext}

–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–≥–æ –∏ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –£—á–∏—Ç—ã–≤–∞–π –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.`;

    // –°—Ç—Ä–æ–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userMessageContent = [
      {
        type: 'input_text',
        text:
          photoPaths.length > 1
            ? `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ ${photoPaths.length} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, —É—á–∏—Ç—ã–≤–∞—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–æ—Å–∞.`
            : '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, —É—á–∏—Ç—ã–≤–∞—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–æ—Å–∞.',
      },
      ...imageContents,
    ];

    const response = await this.client.responses.create({
      model: this.model, // o3
      input: [
        {
          role: 'developer',
          content: [
            {
              type: 'input_text',
              text: extendedPrompt,
            },
          ],
        },
        {
          role: 'user',
          content: [
            {
              type: 'input_text',
              text: '–Ø –±—ã —Ö–æ—Ç–µ–ª –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–æ–µ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è',
            },
          ],
        },
        {
          role: 'assistant',
          content: [
            // @ts-ignore
            {
              type: 'output_text',
              text: '–î–∞, –∫–æ–Ω–µ—á–Ω–æ, —Å–µ–π—á–∞—Å —è —Å–¥–µ–ª–∞—é –≤–∞—à —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —É—á–µ—Ç–æ–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ.',
            },
          ],
        },
        {
          role: 'user',
          content: userMessageContent,
        },
      ],
      text: {
        format: {
          type: 'text',
        },
      },
      reasoning: {
        effort: 'medium',
        summary: null,
      },
      tools: [],
      store: true,
    });

    return response.output_text || '';
  }

  /**
   * –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ–º–ø—Ç full.txt
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å fullAnswer, blockHyposis, shortSummary
   * @param request - –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –æ–ø—Ä–æ—Å–∞
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
   */
  async analyzePhotoWithFullPrompt(request: AnalyzePhotoWithSurveyContextRequest, retryCount: number = 0): Promise<FullAnalysisResponse> {
    try {
      this.logger.log(
        `üîÑ Starting FULL analysis with survey context for user ${request.userId} with ${request.photoUrls.length} photos`,
      );

      const fullPrompt = await this.promptService.getPrompt(PromptKey.OPENAI_FULL_ANALYSIS);

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ {test}
      const surveyContext = JSON.stringify(request.surveyAnswers, null, 2);
      const feelingsContext = request.feelings || '';
      const testContext = `–û—Ç–≤–µ—Ç—ã –Ω–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ–ø—Ä–æ—Å:\n${surveyContext}\n\n–û–ø–∏—Å–∞–Ω–∏–µ —á—É–≤—Å—Ç–≤:\n${feelingsContext}`;

      // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é {test} –≤ –ø—Ä–æ–º–ø—Ç–µ
      const processedPrompt = fullPrompt.replace('{test}', testContext);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —á–µ—Ä–µ–∑ TelegramService
      const { TelegramService } = await import('../../telegram/telegram.service');
      const telegramService = new TelegramService(this.configService);

      const downloadedPhotoPaths: string[] = [];
      for (const photoUrl of request.photoUrls) {
        try {
          const fileName = `${Date.now()}_${Math.random().toString(36).substring(7)}.jpg`;
          const uploadDir = path.join(process.cwd(), 'uploads', 'photos');
          const filePath = path.join(uploadDir, fileName);

          // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
          const downloadedPath = await telegramService.downloadFile(photoUrl, filePath);
          downloadedPhotoPaths.push(downloadedPath);
        } catch (downloadError) {
          this.logger.error(`Failed to download photo ${photoUrl}: ${downloadError.message}`);
          throw new Error(`Failed to download photo: ${downloadError.message}`);
        }
      }

      // Validate all photos exist
      for (const photoPath of downloadedPhotoPaths) {
        if (!fs.existsSync(photoPath)) {
          throw new Error(`Photo file not found: ${photoPath}`);
        }
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è o3 API
      const imageContents = [];
      for (const photoPath of downloadedPhotoPaths) {
        const base64Image = this.encodeImageToBase64(photoPath);
        const mimeType = this.getImageMimeType(photoPath);

        imageContents.push({
          type: 'input_image',
          image_url: `data:${mimeType};base64,${base64Image}`,
        });
      }

      // –°—Ç—Ä–æ–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userMessageContent = [
        {
          type: 'input_text',
          text:
            downloadedPhotoPaths.length > 1
              ? `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ ${downloadedPhotoPaths.length} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, —É—á–∏—Ç—ã–≤–∞—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–æ—Å–∞.`
              : '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, —É—á–∏—Ç—ã–≤–∞—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–æ—Å–∞.',
        },
        ...imageContents,
      ];

      const response = await this.client.responses.create({
        model: this.model, // o3
        input: [
          {
            role: 'developer',
            content: [
              {
                type: 'input_text',
                text: processedPrompt,
              },
            ],
          },
          {
            role: 'user',
            content: [
              {
                type: 'input_text',
                text: '–Ø –±—ã —Ö–æ—Ç–µ–ª –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–æ–µ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è',
              },
            ],
          },
          {
            role: 'assistant',
            content: [
              // @ts-ignore
              {
                type: 'output_text',
                text: '–î–∞, –∫–æ–Ω–µ—á–Ω–æ, —Å–µ–π—á–∞—Å —è —Å–¥–µ–ª–∞—é –≤–∞—à –ø–æ–ª–Ω—ã–π —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —É—á–µ—Ç–æ–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –≤–µ—Ä–Ω—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.',
              },
            ],
          },
          {
            role: 'user',
            content: userMessageContent,
          },
        ],
        text: {
          format: {
            type: 'text',
          },
        },
        reasoning: {
          effort: 'medium',
          summary: null,
        },
        tools: [],
        store: true,
      });

      const analysisResult = response.output_text || '';

      if (!analysisResult) {
        throw new Error('No analysis result received from AI model');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–∫–∞–∑ AI
      if (this.isRefusalResponse(analysisResult) || analysisResult.length < 500) {
        if (retryCount < 2) {
          this.logger.log(`Analyze retry count: ${retryCount}`)
          return await this.analyzePhotoWithFullPrompt(request, retryCount + 1);
        } else {
          this.logger.warn(`AI model refused to analyze photo with full prompt for user ${request.userId}`);
          return {
            fullAnswer: '',
            blockHyposis: '',
            shortSummary: '',
            success: false,
            error: 'AI_REFUSAL',
          };
        }
      }

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç
      try {
        const jsonMatch = analysisResult.match(/\{[\s\S]*\}/);
        if (!jsonMatch) {
          throw new Error('No JSON found in response');
        }

        const jsonResponse = JSON.parse(jsonMatch[0]);

        if (!jsonResponse.fullAnswer || !jsonResponse.blockHyposis || !jsonResponse.shortSummary) {
          throw new Error('Missing required fields in JSON response');
        }

        this.logger.log(`‚úÖ Full analysis completed for user ${request.userId}`);

        return {
          fullAnswer: jsonResponse.fullAnswer,
          blockHyposis: jsonResponse.blockHyposis,
          shortSummary: jsonResponse.shortSummary,
          success: true,
        };
      } catch (parseError) {
        this.logger.error(`Failed to parse JSON response: ${parseError.message}`);
        this.logger.error(`Response content: ${analysisResult.substring(0, 500)}...`);

        // Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç –∫–∞–∫ fullAnswer
        return {
          fullAnswer: analysisResult,
          blockHyposis: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≥–∏–ø–æ—Ç–µ–∑—É –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò.',
          shortSummary: analysisResult.length > 200 ? analysisResult.substring(0, 200) + '...' : analysisResult,
          success: true,
        };
      }
    } catch (error) {
      this.logger.error(`‚ùå Full analysis failed for user ${request.userId}:`, error);

      return {
        fullAnswer: '',
        blockHyposis: '',
        shortSummary: '',
        success: false,
        error: error.message || 'Full analysis failed',
      };
    }
  }
}
