import {
  Controller,
  Get,
  Post,
  Body,
  Param,
  UseGuards,
  Req,
  Res,
  HttpException,
  HttpStatus,
  NotFoundException,
  Query,
} from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiBody } from '@nestjs/swagger';
import { MiniAppService } from './mini-app.service';
import { Request, Response } from 'express';
import * as path from 'path';
import * as fs from 'fs';
import { IsObject, IsString } from 'class-validator';

/**
 * DTO –¥–ª—è —Ç–µ—Å—Ç–∞ –õ—é—à–µ—Ä–∞
 */
export class LuscherTestResultDto {
  @IsObject()
  results: Record<string, any>;
}

/**
 * DTO –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export class MiniAppDataDto {
  userId: string;
  action: 'opened' | 'closed' | 'button_clicked' | 'share_clicked' | 'return_to_bot';
  data?: any; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
  timestamp: number;
}

/**
 * DTO –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export class InitMiniAppDto {
  initData: string; // Telegram init data string
}

/**
 * DTO –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–∏–ø–æ—Ç–µ–∑—ã
 */
export class ShareHypothesisDto {
  userId: string;
  hypothesis: string;
  initData: string; // Telegram init data –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
}

/**
 * DTO –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –õ—é—à–µ—Ä–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
 */
export class SaveLuscherResultDto {
  @IsString()
  userId: string;

  // –í —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ –ø–æ–ª–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è result, –∞ –Ω–µ results
  @IsObject()
  result: Record<string, any>;
}

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –≥–∏–ø–æ—Ç–µ–∑—ã
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram Mini App –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
 */
@Controller('mini-app')
@ApiTags('Mini App')
export class MiniAppController {
  constructor(private readonly miniAppService: MiniAppService) { }

  /**
   * ‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è: –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   * –î–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É /app
   */
  @Get('app')
  @ApiOperation({ summary: '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –≥–∏–ø–æ—Ç–µ–∑–æ–π' })
  async getMainPage(@Res() res: Response) {
    try {
      const html = await this.miniAppService.getStaticFile('index.html');

      // ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è production
      res.setHeader('X-Content-Type-Options', 'nosniff');
      res.setHeader('X-Frame-Options', 'SAMEORIGIN');
      res.setHeader('Content-Type', 'text/html; charset=utf-8');

      // ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–µ–¥—ã
      if (process.env.NODE_ENV === 'production') {
        res.setHeader('Cache-Control', 'public, max-age=3600, stale-while-revalidate=86400');
        res.setHeader('ETag', `"${Date.now()}"`);
      } else {
        res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
      }

      res.send(html);
    } catch (error) {
      res.status(404).send('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
  }

  // CSS –∏ JS —Ñ–∞–π–ª—ã —Ç–µ–ø–µ—Ä—å –æ–±—Å–ª—É–∂–∏–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ Express static middleware –≤ main.ts
  // –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å Telegram –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≥–∏–ø–æ—Ç–µ–∑–æ–π
   */
  @Post('init')
  @ApiOperation({ summary: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' })
  @ApiBody({ type: InitMiniAppDto })
  @ApiResponse({ status: 200, description: '–£—Å–ø–µ—à–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –≥–∏–ø–æ—Ç–µ–∑—ã' })
  @ApiResponse({ status: 401, description: '–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å Telegram' })
  async initMiniApp(@Body() dto: InitMiniAppDto) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å Telegram
      const isValid = this.miniAppService.validateTelegramData(dto.initData);
      if (!isValid) {
        throw new HttpException('–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å Telegram', HttpStatus.UNAUTHORIZED);
      }

      // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
      const userData = this.miniAppService.parseTelegramInitData(dto.initData);

      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await this.miniAppService.getOrCreateUser(userData);

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      const miniAppData = await this.miniAppService.getUserInfoForMiniApp(user.id);

      const response = {
        success: true,
        user: {
          id: user.id,
          telegramId: user.telegramId,
          username: user.telegramUsername,
          language: user.language,
          pipelineState: user.pipelineState,
        },
        ...miniAppData, // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
      };

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      console.log(`üì∏ Mini-app init response for user ${user.id}:`, response);

      return response;
    } catch (error) {
      throw new HttpException(
        error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
        error.status || HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  /**
   * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
   */
  @Post('track')
  @ApiOperation({ summary: '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏' })
  @ApiBody({ type: MiniAppDataDto })
  @ApiResponse({ status: 200, description: '–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ' })
  async trackAction(@Body() dto: MiniAppDataDto) {
    try {
      await this.miniAppService.trackUserAction(dto);
      return { success: true };
    } catch (error) {
      throw new HttpException('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ', HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–∏–ø–æ—Ç–µ–∑—ã –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å Telegram –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–∏–ø–æ—Ç–µ–∑—É –≤ —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  @Post('share-hypothesis')
  @ApiOperation({ summary: '–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –≥–∏–ø–æ—Ç–µ–∑—ã –≤ —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' })
  @ApiBody({ type: ShareHypothesisDto })
  @ApiResponse({ status: 200, description: '–ì–∏–ø–æ—Ç–µ–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' })
  @ApiResponse({ status: 401, description: '–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å Telegram' })
  @ApiResponse({ status: 400, description: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' })
  async shareHypothesis(@Body() dto: ShareHypothesisDto) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å Telegram
      const isValid = this.miniAppService.validateTelegramData(dto.initData);
      if (!isValid) {
        throw new HttpException('–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å Telegram', HttpStatus.UNAUTHORIZED);
      }

      // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
      const telegramUserData = this.miniAppService.parseTelegramInitData(dto.initData);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–∏–ø–æ—Ç–µ–∑—É
      const result = await this.miniAppService.shareHypothesis(telegramUserData.id, dto.hypothesis);

      if (!result.success) {
        throw new HttpException(result.message, HttpStatus.BAD_REQUEST);
      }

      return {
        success: true,
        message: result.message,
      };
    } catch (error) {
      throw new HttpException(
        error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–∏–ø–æ—Ç–µ–∑—É',
        error.status || HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  /**
   * Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  @Post('webhook')
  @ApiOperation({ summary: 'Webhook –¥–ª—è —Å–æ–±—ã—Ç–∏–π –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' })
  async handleWebhook(@Body() data: any, @Req() req: Request) {
    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    console.log('Webhook –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', data);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    await this.miniAppService.handleWebhookEvent(data);

    return { success: true };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
   */
  @Get('download-image/:userId')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' })
  @ApiResponse({ status: 200, description: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ' })
  @ApiResponse({ status: 404, description: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' })
  async downloadSocialImage(@Param('userId') userId: string, @Req() req: Request, @Res() res: Response) {
    try {
      // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await this.miniAppService.logDiagnostic(
        'INFO',
        'mini-app',
        'image-download-request',
        `Requesting social image for user ${userId}`,
        { userId },
        req.headers['user-agent'] as string,
        req.ip,
      );

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∫–ª—é—á–∞—è URL –∫–∞—Ä—Ç–æ—á–∫–∏
      const miniAppData = await this.miniAppService.getUserInfoForMiniApp(userId);

      // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      await this.miniAppService.logDiagnostic(
        'DEBUG',
        'mini-app',
        'image-download-data',
        `Mini app data retrieved for user ${userId}`,
        { userId, miniAppData },
        req.headers['user-agent'] as string,
        req.ip,
      );

      if (!miniAppData.socialCardUrl) {
        await this.miniAppService.logDiagnostic(
          'WARN',
          'mini-app',
          'image-download-no-url',
          `No socialCardUrl found for user ${userId}`,
          { userId, miniAppData },
          req.headers['user-agent'] as string,
          req.ip,
        );
        return res.status(404).json({
          success: false,
          message: '–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
        });
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π URL
      await this.miniAppService.logDiagnostic(
        'DEBUG',
        'mini-app',
        'image-download-url-found',
        `Social card URL found: ${miniAppData.socialCardUrl}`,
        { userId, socialCardUrl: miniAppData.socialCardUrl },
        req.headers['user-agent'] as string,
        req.ip,
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      if (!fs.existsSync(miniAppData.socialCardUrl)) {
        await this.miniAppService.logDiagnostic(
          'ERROR',
          'mini-app',
          'image-download-file-not-found',
          `Social card file does not exist: ${miniAppData.socialCardUrl}`,
          { userId, socialCardUrl: miniAppData.socialCardUrl },
          req.headers['user-agent'] as string,
          req.ip,
        );
        return res.status(404).json({
          success: false,
          message: '–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä download –¥–ª—è —Ä–µ–∂–∏–º–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const isDownload = req.query.download === 'true';

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
      const fileStats = fs.statSync(miniAppData.socialCardUrl);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
      res.setHeader('Content-Type', 'image/jpeg');
      res.setHeader('Content-Length', fileStats.size);

      if (isDownload) {
        // –î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è - attachment
        res.setHeader('Content-Disposition', `attachment; filename="evernow_analysis_${userId}_${Date.now()}.jpg"`);
        res.setHeader('Cache-Control', 'no-cache');
      } else {
        // –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ - inline
        res.setHeader('Content-Disposition', 'inline');
        res.setHeader('Cache-Control', 'public, max-age=3600');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
      const stream = fs.createReadStream(miniAppData.socialCardUrl);
      stream.pipe(res);

      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
      await this.miniAppService.logDiagnostic(
        'INFO',
        'mini-app',
        'image-download-success',
        `Social image sent successfully for user ${userId}`,
        { userId, socialCardUrl: miniAppData.socialCardUrl, fileSize: fileStats.size },
        req.headers['user-agent'] as string,
        req.ip,
      );
    } catch (error) {
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      await this.miniAppService.logDiagnostic(
        'ERROR',
        'mini-app',
        'image-download-error',
        `Error downloading social image for user ${userId}: ${error.message}`,
        { userId, error: error.message, stack: error.stack },
        req.headers['user-agent'] as string,
        req.ip,
      );
      return res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      });
    }
  }

  /**
   * ‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  @Get('user-info/:userId')
  async getUserInfo(@Param('userId') userId: string, @Res() res: Response) {
    try {
      const userInfo = await this.miniAppService.getUserInfoForMiniApp(userId);
      if (!userInfo) {
        throw new NotFoundException('User info not found');
      }

      // ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API
      if (process.env.NODE_ENV === 'production') {
        // –ö–µ—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≥–∏–ø–æ—Ç–µ–∑–∞ –≥–æ—Ç–æ–≤–∞
        if (userInfo.hypothesis) {
          res.setHeader('Cache-Control', 'public, max-age=300, stale-while-revalidate=600'); // 5 –º–∏–Ω—É—Ç
        } else {
          res.setHeader('Cache-Control', 'public, max-age=30, stale-while-revalidate=60'); // 30 —Å–µ–∫—É–Ω–¥
        }
      } else {
        res.setHeader('Cache-Control', 'no-cache');
      }

      console.log(`üì∏ User info for user ${userId}:`, userInfo);
      return res.json(userInfo);
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw error;
      }
      throw new HttpException('Internal server error', HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }

  @Post('luscher-test/:userId')
  async saveLuscherTestResult(@Param('userId') userId: string, @Body() luscherTestResultDto: LuscherTestResultDto) {
    return this.miniAppService.saveLuscherTestResult(userId, luscherTestResultDto.results);
  }

  @Get('/loading-video/:locale')
  async getLoadingVideo(@Param('locale') locale: 'ru' | 'en' = 'ru'): Promise<string> {
    return this.miniAppService.getLoadingVideo(locale)
  }

  @Get('/loading-title/:locale')
  async getLoadingTitle(@Param('locale') locale: 'ru' | 'en' = 'ru'): Promise<{ title: string; subtitle: string }> {
    return this.miniAppService.getLoadingTitle(locale)
  }

  @Get('/report-title/:locale')
  async getReportTitle(@Param('locale') locale: 'ru' | 'en' = 'ru'): Promise<{ title: string; subtitle: string }> {
    return this.miniAppService.getReportTitle(locale)
  }
  /**
   * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –õ—é—à–µ—Ä–∞.
   * –§—Ä–æ–Ω—Ç–µ–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç POST /save-luscher-result —Å userId –∏ result.
   */
  @Post('save-luscher-result')
  @ApiOperation({ summary: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞ –õ—é—à–µ—Ä–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)' })
  @ApiBody({ type: SaveLuscherResultDto })
  @ApiResponse({ status: 200, description: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã' })
  async saveLuscherTestResultAlt(@Body() dto: SaveLuscherResultDto) {
    try {
      await this.miniAppService.saveLuscherTestResult(dto.userId, dto.result);
      return { success: true };
    } catch (error) {
      throw new HttpException(
        error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞',
        error.status || HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  /**
   * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º URL
   * –§—Ä–æ–Ω—Ç–µ–Ω–¥ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å POST /luscher-results —Å userId –∏ results
   */
  @Post('luscher-results')
  @ApiOperation({ summary: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞ –õ—é—à–µ—Ä–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)' })
  @ApiResponse({ status: 200, description: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã' })
  async saveLuscherResults(@Body() dto: { userId: string; results: Record<string, any> }) {
    try {
      await this.miniAppService.saveLuscherTestResult(dto.userId, dto.results);
      return { success: true };
    } catch (error) {
      throw new HttpException(
        error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞',
        error.status || HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  @Get('health')
  healthCheck() {
    return { status: 'ok', timestamp: new Date().toISOString() };
  }

  /**
   * –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
   */
  @Post('log')
  @ApiOperation({ summary: '–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞' })
  async logFrontendEvent(@Body() dto: any, @Req() req: Request) {
    try {
      await this.miniAppService.logDiagnostic(
        dto.level || 'INFO',
        'mini-app-frontend',
        dto.action || 'unknown',
        dto.message || '',
        dto.metadata,
        dto.userId,
        req.headers['user-agent'] as string,
        req.ip,
        dto.telegramId,
      );
      return { success: true };
    } catch (error) {
      return { success: false, error: error.message };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ª–æ–≥–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
   */
  @Get('logs')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ª–æ–≥–æ–≤' })
  async getDiagnosticLogs(
    @Req() req: Request,
    @Query('userId') userId?: string,
    @Query('component') component?: string,
    @Query('level') level?: string,
    @Query('limit') limit?: string,
    @Query('offset') offset?: string,
  ) {
    try {
      const logs = await this.miniAppService.getDiagnosticLogs(
        userId,
        component,
        level,
        limit ? parseInt(limit) : 100,
        offset ? parseInt(offset) : 0,
      );
      return { success: true, logs };
    } catch (error) {
      return { success: false, error: error.message };
    }
  }
}
