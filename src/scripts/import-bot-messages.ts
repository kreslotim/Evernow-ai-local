#!/usr/bin/env ts-node

import * as fs from 'fs';
import * as path from 'path';
import { PrismaClient } from '@prisma/client';

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –∏–∑ –ª–æ–∫–∞–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * npm run import:bot-messages
 *
 * –û–ø—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
 * LOCALE - –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ (ru|en)
 * OVERWRITE - –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (true|false)
 * DRY_RUN - —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ë–î (true|false)
 */

const prisma = new PrismaClient();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  locale: process.env.LOCALE as 'ru' | 'en' | undefined,
  overwrite: process.env.OVERWRITE === 'true',
  dryRun: process.env.DRY_RUN === 'true',
  verbose: process.env.VERBOSE === 'true',
};

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –ª–æ–∫–∞–ª–µ–π
const localesDir = path.join(__dirname, '../bot/i18n/locales');
const localeFiles = {
  ru: path.join(localesDir, 'ru.json'),
  en: path.join(localesDir, 'en.json'),
};

// –ö–ª—é—á–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –±–æ—Ç—É (–Ω–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ)
const botMessagePrefixes = [
  'greeting.',
  'onboarding.',
  'commands.',
  'keyboard.',
  'errors.',
  'scenes.balance.',
  'scenes.referral.',
  'support.',
  'notifications.',
  'analysis.',
  'timer.',
  'feelings.',
  'hypothesis.',
  'video.',
  'photo.',
];

interface LocaleData {
  [key: string]: any;
}

interface MessageToImport {
  key: string;
  locale: string;
  content: string;
  description: string;
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç —Ñ–∞–π–ª –ª–æ–∫–∞–ª–∏
 */
function loadLocaleFile(locale: 'ru' | 'en'): LocaleData | null {
  try {
    const filePath = localeFiles[locale];
    if (!fs.existsSync(filePath)) {
      console.warn(`‚ö†Ô∏è  –§–∞–π–ª –ª–æ–∫–∞–ª–∏ ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return null;
    }

    const content = fs.readFileSync(filePath, 'utf-8');
    const data = JSON.parse(content);

    if (config.verbose) {
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –ª–æ–∫–∞–ª–∏: ${filePath}`);
    }

    return data;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –ª–æ–∫–∞–ª–∏ ${locale}:`, error);
    return null;
  }
}

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –ª–æ–∫–∞–ª–∏
 */
function flattenLocaleObject(obj: any, prefix: string = ''): Record<string, string> {
  const result: Record<string, string> = {};

  for (const [key, value] of Object.entries(obj)) {
    const fullKey = prefix ? `${prefix}.${key}` : key;

    if (typeof value === 'string') {
      result[fullKey] = value;
    } else if (typeof value === 'object' && value !== null) {
      Object.assign(result, flattenLocaleObject(value, fullKey));
    }
  }

  return result;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –∫–ª—é—á –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º –±–æ—Ç–∞
 */
function isBotMessageKey(key: string): boolean {
  return botMessagePrefixes.some((prefix) => key.startsWith(prefix));
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–∞
 */
function generateDescription(key: string, locale: string): string {
  const parts = key.split('.');
  const section = parts[0];
  const subsection = parts[1];

  const descriptions: Record<string, string> = {
    greeting: `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (${locale.toUpperCase()})`,
    onboarding: `–°–æ–æ–±—â–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ (${locale.toUpperCase()})`,
    commands: `–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (${locale.toUpperCase()})`,
    keyboard: `–ö–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (${locale.toUpperCase()})`,
    errors: `–°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö (${locale.toUpperCase()})`,
    scenes: `–°—Ü–µ–Ω—ã –±–æ—Ç–∞ (${locale.toUpperCase()})`,
    support: `–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (${locale.toUpperCase()})`,
    notifications: `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (${locale.toUpperCase()})`,
    analysis: `–°–æ–æ–±—â–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ (${locale.toUpperCase()})`,
    timer: `–°–æ–æ–±—â–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ (${locale.toUpperCase()})`,
    feelings: `–°–æ–æ–±—â–µ–Ω–∏—è –æ —á—É–≤—Å—Ç–≤–∞—Ö (${locale.toUpperCase()})`,
    hypothesis: `–°–æ–æ–±—â–µ–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑ (${locale.toUpperCase()})`,
    video: `–°–æ–æ–±—â–µ–Ω–∏—è –≤–∏–¥–µ–æ (${locale.toUpperCase()})`,
    photo: `–°–æ–æ–±—â–µ–Ω–∏—è —Ñ–æ—Ç–æ (${locale.toUpperCase()})`,
  };

  if (subsection) {
    return `${descriptions[section] || section} - ${subsection}`;
  }

  return descriptions[section] || `–°–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: ${key} (${locale.toUpperCase()})`;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ –ª–æ–∫–∞–ª–∏
 */
function extractBotMessages(locale: 'ru' | 'en'): MessageToImport[] {
  const localeData = loadLocaleFile(locale);
  if (!localeData) {
    return [];
  }

  const flattenedMessages = flattenLocaleObject(localeData);
  const botMessages: MessageToImport[] = [];

  for (const [key, content] of Object.entries(flattenedMessages)) {
    if (isBotMessageKey(key)) {
      botMessages.push({
        key,
        locale,
        content,
        description: generateDescription(key, locale),
      });
    }
  }

  return botMessages;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
async function messageExists(key: string, locale: string): Promise<boolean> {
  const existing = await prisma.prompt.findUnique({
    where: {
      key_locale: {
        key,
        locale,
      },
    },
  });

  return !!existing;
}

/**
 * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 */
async function importMessage(message: MessageToImport): Promise<boolean> {
  try {
    if (config.dryRun) {
      console.log(`üîç [DRY RUN] –ò–º–ø–æ—Ä—Ç: ${message.key}:${message.locale}`);
      return true;
    }

    const exists = await messageExists(message.key, message.locale);

    if (exists && !config.overwrite) {
      if (config.verbose) {
        console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç): ${message.key}:${message.locale}`);
      }
      return false;
    }

    await prisma.prompt.upsert({
      where: {
        key_locale: {
          key: message.key,
          locale: message.locale,
        },
      },
      update: {
        content: message.content,
        description: message.description,
        isActive: true,
        updatedAt: new Date(),
      },
      create: {
        key: message.key,
        locale: message.locale,
        content: message.content,
        description: message.description,
        provider: 'BOT_MESSAGE',
        isActive: true,
      },
    });

    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${message.key}:${message.locale}`);
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ${message.key}:${message.locale}:`, error);
    return false;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞
 */
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –∏–∑ –ª–æ–∫–∞–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n');

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  console.log('‚öôÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
  console.log(`   –Ø–∑—ã–∫: ${config.locale || '–≤—Å–µ —è–∑—ã–∫–∏'}`);
  console.log(`   –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å: ${config.overwrite ? '–¥–∞' : '–Ω–µ—Ç'}`);
  console.log(`   –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫: ${config.dryRun ? '–¥–∞' : '–Ω–µ—Ç'}`);
  console.log(`   –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥: ${config.verbose ? '–¥–∞' : '–Ω–µ—Ç'}\n`);

  const locales: ('ru' | 'en')[] = config.locale ? [config.locale] : ['ru', 'en'];
  let totalImported = 0;
  let totalSkipped = 0;
  let totalErrors = 0;

  for (const locale of locales) {
    console.log(`üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞–ª–∏: ${locale.toUpperCase()}`);

    const messages = extractBotMessages(locale);
    console.log(`   –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${messages.length}`);

    if (messages.length === 0) {
      console.log(`   ‚ö†Ô∏è  –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ª–æ–∫–∞–ª–∏ ${locale}\n`);
      continue;
    }

    let imported = 0;
    let skipped = 0;
    let errors = 0;

    for (const message of messages) {
      try {
        const wasImported = await importMessage(message);
        if (wasImported) {
          imported++;
        } else {
          skipped++;
        }
      } catch (error) {
        errors++;
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${message.key}:`, error);
      }
    }

    console.log(`   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è ${locale.toUpperCase()}:`);
    console.log(`      –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${imported}`);
    console.log(`      –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}`);
    console.log(`      –û—à–∏–±–æ–∫: ${errors}\n`);

    totalImported += imported;
    totalSkipped += skipped;
    totalErrors += errors;
  }

  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('üìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
  console.log(`   –í—Å–µ–≥–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${totalImported}`);
  console.log(`   –í—Å–µ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${totalSkipped}`);
  console.log(`   –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: ${totalErrors}`);

  if (config.dryRun) {
    console.log('\nüîç –≠—Ç–æ –±—ã–ª —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫. –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ —É–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é DRY_RUN');
  } else if (totalImported > 0) {
    console.log('\n‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω!');
  } else {
    console.log('\n‚ö†Ô∏è  –ù–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main()
    .catch((error) => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞:', error);
      process.exit(1);
    })
    .finally(async () => {
      await prisma.$disconnect();
    });
}

export { main as importBotMessages };
